1>.容易忘记的名词解析:
Socket:操作系统内部的一个库,可通过调用库实现各种功能。
socket:程序组件的名称；
描述符：套接字创建完成后生成用来识别不同套接字的符号。通过描述符就可以确定套接字继而获取相关的信息。
套接字:管道两端的接口,内部存储各种描述符 + ip + 端口号。放置这些控制信息的的载体就是套接字。
三个易混概念。


控制信息：控制数据收发操作所需要的一系列必须信息,ip与端口号就是典型例子。
  分类：1>.客户端与服务器之间连接所交换的控制信息。  不仅连接时需要,整个通信包括收发和断开操作仍需要。
           位于网络包的头部,称为头部信息。
        2>.保存在套接字内存空间中用于控制协议栈操作的信息。
           协议栈依据这些信息来执行相应的操作。
        
应用程序：客户端/服务器，Socket库还有解析器。应用程序的下部是协议栈。
协议栈：操作系统内部网络控制软件。包括TCP,UDP,ICMP,IP,ARP；等协议。协议栈的下部是驱动程序。
驱动程序：网卡驱动程序,架设在操作系统上的一层用于控制硬件的东西。网卡驱动下面是网卡。
网卡:负责实际的收发操作,也就是对网线中的型号执行发送和接收的操作。
协议栈和套接字的关系：协议栈需要根据套接字中记录的用于控制通信操作的控制信息来判断下一步该做什么。



2.创建套接字：浏览器调用socket组件，首先会分配一个套接字所需要的内存空间,然后向内部写入初始状态。然后将这个套接字的描述符告知应用程序。
  内存空间的分配：通过操作系统向内存管理模块提出申请,请他划分出一片内存。
  
3.连接服务器：套接字创建成功,浏览器调用connet组件,将服务器的套接字与客户端的套接字进行连接。也就是通信双方交换控制信息。所谓的三次握手。
  连接的目的：1>.将服务器的ip与端口号等信息告知协议栈，协议栈依据信息确定发送对象。
  连接实质：协议栈中TCP模块拿到服务器的ip与端口号,然后与服务器的TCP模块交换控制信息。
  
4.收发数据：
  1>.将HTTP消息交给协议栈。
      发送数据时的判断要素：
        MTU:最大传输单元。一个网络包的最大长度。依据MTU可判断每个网络包所能容纳的数据的长度。
        MSS:最大分段大小。除头部之后一个网络包所能容纳TCP数据的最大长度。MTU-TCP头-IP头 = MSS。协议栈发送数据时的拆分标准值。
        时间:协议栈接收到数据后放置内部发送缓冲区时候的等待时间。
        
  2>.对较大数据进行拆分。
       MSS。协议栈发送数据时的拆分标准值。TCP会按照网络包的大小对数据进行拆分。 
       
  3>.使用 ACK 号确认网络包已收到。
    确认重发机制：实现了TCP可靠连接的基础
       序号：拆分后的数据的序列号。
       长度：数据拆分后的长度。
       ACK号：确认相应。接收方确认无遗漏数据时将所接收到的数据的所有字节数相加并写入TCP头部的ACK号中发送发送方。
       通过这样的方式，发送方就可以确认对方到底收到了多少数据。这就实现了TCP可靠连接的基础。(重点)
       上述仅仅考虑单向的传送,TCP的数据收发是双向的。同理增加一条相反的的情形就可以了。
       TCP采用这样的方式确认对方是否得到了数据，在对方确认之前都会存储在发送缓冲区,若对方没有返回对应包的ACK号,则进行重发。
       这被称为TCP的确认重发机制。尝试几次确认重发之后就会强制结束通信，并向应用程序报错。
       
       
       窗口管理ACK号：发送一个包不等ACK号的返回而是直接发送后续的一系列包。防止等待ACK号的时间的浪费。同时接收方通过TCP头部窗口字段将所能接收的大小告知。
       
       ACK号与窗口的合并：返回ACK号和更新窗口的时机。
          接收方发送ACK号和窗口更新时不会立即发送包,等待一段时间，将所有通知以及ACK号和窗口更新合并在一个包之内一起发送。
          
5.从服务器断开并删除套接字：断开的一方调用Socket库中的close程序。也就是所谓的四次挥手。
      套接字不会立即删除,而是会等待一段时间，防止误操作。
       

